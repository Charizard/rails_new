def yes?(question)
  return true unless @customized

  answer = ask "     \e[1m\e[32mpromp".rjust(10) + "  \e[0m#{question} \e[33m(y/n)\e[0m"
  case answer.downcase
  when 'yes', 'y'
    true
  when 'no', 'n'
    false
  else
    yes?(question)
  end
end

def prompt(question, options)
  answer = ask("     \e[1m\e[32mpromp".rjust(10) + "  \e[0m#{question} \e[33m[#{options[:default_answer]}]\e[0m").strip
  answer.present? ? answer : options[:default_answer]
end

def rewrite_file(file, content)
  system "rm #{file} && > #{file}"
  append_to_file(file, content)
  # first sed: remove duplicated empty lines
  # second sed: remove lines with whitespaces
  system "cat #{file} | sed '/^$/N;/^\\n$/D' | sed '/^ *$/d' > sed_output"
  system "mv sed_output #{file}"
end

def commit(description)
  system 'git add .'
  system 'git add --update .'
  system "git commit -am '#{description}'"
end

def database_adapter
  case @database
  when 'postgresql', 'postgres', 'psql' then 'pg'
  when 'mysql'                          then 'mysql2'
  when 'sqlite'                         then 'sqlite3'
  when 'mongo', 'mongodb'               then 'mongoid'
  else @database
  end
end

def database_encoding
  case database_adapter
  when 'pg'     then 'unicode'
  when 'mysql1' then 'utf8'
  end
end


@app_name   = `pwd`.gsub(/.*\/(.+)/, '\1').strip
@customized = true

@database            = prompt 'What database you want to use?', default_answer: 'postgresql'
@customized          = yes? 'Would you like to customize the template options?'
@create_commits      = yes? 'Create first git commits?'
# @static_pages        = yes? 'Create static pages?'
# @haml                = yes? 'Use HAML?'
@pt_br_localees      = yes? 'Use brazilian portuguese locale (I18n)?'
# @twitter_bootstrap   = yes? 'Install and configure Twitter Bootstrap Rails gem?'
# @devise              = yes? 'Install and configure Devise gem?'


remove_file 'public/index.html'
remove_file 'app/assets/images/rails.png'

rewrite_file 'Gemfile', %Q(
source 'https://rubygems.org'
ruby '1.9.3'

#{@haml ? "gem 'haml-rails'" : ''}
gem 'jquery-rails'
gem '#{database_adapter}'
gem 'rails', '3.2.9'

group :development do
  gem 'thin'
end

group :development, :test do
  gem 'pry'
  gem 'awesome_print'
end

group :test do
  gem 'capybara'
  gem 'factory_girl_rails'
  gem 'forgery'
  gem 'poltergeist'
  gem 'rspec-rails'
  gem 'simplecov', require: false
end

group :assets do
  gem 'sass-rails', '~> 3.2.3'
  gem 'coffee-rails', '~> 3.2.1'
  gem 'uglifier', '>= 1.0.3'
end
).strip

rewrite_file '.gitignore', %Q(
# See http://help.github.com/ignore-files/ for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile ~/.gitignore_global

# Ignore bundler config
/.bundle

# Ignore all logfiles and tempfiles
/log/*.log
/tmp

# Ignore config files
/config/database.yml

# Ignore docs
/doc/api
/doc/app

# Ignore public sub-directories
/public/packages/*
/public/system/*

# Ignore files from text editors and IDEs
Session.vim
*.sw?

# Ignore files from Operating System
*~
.DS_Store

# Ignore files from Ctags
/tags

# Ignore files from RVM
/.rvmrc

# Ignore files from SASS
/.sass-cache/

# Ignore routes cache
/.routes

# Ignore simplecov files
coverage/

# Ignore other files
rails_best_practices_output.html
).strip

rewrite_file 'config/database.yml', %Q(
defaults: &defaults
  adapter: #{database_adapter}
  #{database_encoding ? "encoding: #{database_encoding}" : ''}
  #{database_adapter == 'mysql2' ? 'reconnect: false' : ''}
  pool: 5
  #{database_adapter == 'sqlite3' ? 'timeout: 5000' : ''}
  username:
  password:
  #{database_adapter == 'mysql2' ? 'socket: /tmp/mysql.sock' : ''}

development:
  <<: *defaults
  #{database_adapter == 'sqlite3' ? 'database: db/development.sqlite3' : "database: #{@app_name}_development"}

test:
  <<: *defaults
  #{database_adapter == 'sqlite3' ? 'database: db/test.sqlite3' : "database: #{@app_name}_test"}

production:
  <<: *defaults
  #{database_adapter == 'sqlite3' ? 'database: db/production.sqlite3' : "database: #{@app_name}"}
).strip

system 'bundle install'

if @create_commits
  system 'git init'
  commit 'Initial Rails directory structure'
end

if @pt_br_localees
  remove_file 'config/locales/en.yml'
  # Include config/locales*.pt-BR.yml files
  # Update config/application.rb
  commit 'Including pt-br locales' if @create_commits
end
